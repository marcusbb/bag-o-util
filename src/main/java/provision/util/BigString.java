/*
 * (C) 2009 Research In Motion Ltd. All Rights Reserved.
 * RIM, Research In Motion -- Reg. U.S. Patent and Trademark Office
 * The RIM Logo and Inter@ctive are trademarks of Research In Motion, Limited
 * All materials confidential information of Research In Motion, Limited
 *
 * $Id: //depot/dev/cardhu/IES/common/master/util/src/main/java/provision/util/BigString.java#1 $
 * $Author: msimonsen $ $DateTime: 2012/12/12 09:03:29 $ $Change: 6006354 $
 */
package provision.util;

import java.util.StringTokenizer;

/**
 * Have fun using this class for logging big. 
 * 
 * @author Iulian Vlasov
 */
public class BigString {

	private static final int     MAX_CHAR_HEIGHT    = 16;
	private static final int     DEF_FIRST_SCANLINE = 2;
	private static final int     DEF_LAST_SCANLINE  = 13;
	private static final int     DEF_BASE_CHAR      = '!';
	private static final boolean DEF_REPLACE_BIG    = false;
	private static final boolean DEF_DBLSPACE       = false;
	private static final String  DEF_DOT            = "\u0002";
	private static final String  DEF_SPACE          = " ";
	private static final String  CRLF               = System.getProperty("line.separator");

	// configuration parameters
	private int     firstLine  = DEF_FIRST_SCANLINE;
	private int     lastLine   = DEF_LAST_SCANLINE;
	private boolean replaceBig = DEF_REPLACE_BIG;
	private boolean dblSpace   = DEF_DBLSPACE;
	private String  dot        = DEF_DOT;
	private String  space      = DEF_SPACE;

	private String string;


	public BigString() {}

	public BigString(String s) {
		setSource(s);
	}

	private void setSource(String s) {
		this.string = s.replace("\\n", CRLF);
	}

	public static String get(String s) {
		return get(s, DEF_FIRST_SCANLINE);
	}

    public static String get(String s, int firstLine) {
        return get(s, firstLine, DEF_LAST_SCANLINE, null);
    }

    public static String get(String s, int firstLine, int lastLine, String dotValue) {
        BigString big = new BigString(s);
        big.setFirstLine(firstLine);
        big.setLastLine(lastLine);
        if (dotValue == null) {
            big.setReplaceBig(true);
        }
        else {
            big.setDot(dotValue);
        }
        return big.toString();
    }

	public String toString(String s) {
		String oldString = this.string;
		setSource(s);

		String bigString = toString();
		this.string = oldString;

		return bigString;
	}

	public String toString() {
		if ((string == null) || (string.trim().length() == 0)) return "";

		StringBuffer sb = new StringBuffer(CRLF);

		StringTokenizer stok = new StringTokenizer(string, CRLF);
		while (stok.hasMoreTokens()) {
			sb.append( getBigString( stok.nextToken()));
		}

		return sb.toString();
	}


	public void setFirstLine(int value) {
		if ((value >= 0) && (value < lastLine)) {
			this.firstLine = value;
		}
	}

	public void setLastLine(int value) {
		if ((value > firstLine) && (value < MAX_CHAR_HEIGHT)) {
			this.lastLine = value;
		}
	}

	public void setReplaceBig(boolean value) {
		this.replaceBig = value;
	}

	public void setDoubleSpace(boolean value) {
		this.dblSpace = value;
	}

	public void setDot(String value) {
		if ((value != null) && (value.length() > 0)) {
			this.dot = value;

			if (space.equals(DEF_SPACE)) {
				if (dot.length() > 1) {
					for (int i = 0; i < dot.length() - 1; i++) {
						space += DEF_SPACE;
					}
				}
			}
		}
	}

	public void setSpace(String value) {
		this.space = value;
	}


	private String getBigString(String s) {
		StringBuffer sb = new StringBuffer();
		int charLen = s.length();

		String bit0 = space;
		String bit1 = this.dot;

		if (this.dblSpace) {
			bit0 += space;
			bit1 += space;
		}

		int charHeight = lastLine - firstLine + 1;
		for (int line = 0; line < charHeight; line++) {
			for (int car = 0; car < charLen; car++) {
				char c = s.charAt(car);

				if (Character.isWhitespace(c)) {
					int count = (dblSpace ? 2 : 1);
					for (int i = 0; i < count; i++) {
						for (int j = 0; j < 8; j++) {
							sb.append(space);
						}
					}

					continue;
				}

				int offset = (int) c - DEF_BASE_CHAR;
				if ((offset >= 0) && (offset < matrix.length)) {
					byte[] lines = matrix[offset];
					byte b = lines[firstLine + line];
					int bitmask = 0x80;

					for (int i = 0; i < 8; i++) {
						if (b == 0) {
							do {
								sb.append(bit0);
							} while (++i < 8);
							break;
						}

						int bit = bitmask & b;
						if (bit == 0) {
							sb.append(bit0);
						}
						else {
							if (this.replaceBig) {
								sb.append(s.charAt(car));

								if (this.dblSpace) sb.append(space);
							}
							else {
								sb.append(bit1);
							}
						}

						b = (byte) (b & (bitmask ^ 0xFFFF));
						bitmask = bitmask >> 1;
					}
				}

			}

			sb.append(CRLF);
		}

		return sb.toString();
	}

	private byte[][] matrix = {
			{(byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x3C, (byte) 0x3C, (byte) 0x3C, (byte) 0x3C, (byte) 0x18, (byte) 0x18, (byte) 0x00, (byte) 0x18, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // ! 21
			{(byte) 0x00, (byte) 0x36, (byte) 0x36, (byte) 0x36, (byte) 0x36, (byte) 0x14, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // " 22
			{(byte) 0x00, (byte) 0x00, (byte) 0x6C, (byte) 0x6C, (byte) 0x6C, (byte) 0xFE, (byte) 0x6C, (byte) 0x6C, (byte) 0xFE, (byte) 0x6C, (byte) 0x6C, (byte) 0x6C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // # 23
			{(byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x18, (byte) 0x7C, (byte) 0xC6, (byte) 0xC0, (byte) 0x78, (byte) 0x3C, (byte) 0x06, (byte) 0xC6, (byte) 0x7C, (byte) 0x18, (byte) 0x18, (byte) 0x00, (byte) 0x00}, // $ 24
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x62, (byte) 0x66, (byte) 0x0C, (byte) 0x18, (byte) 0x30, (byte) 0x66, (byte) 0xC6, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // % 25
			{(byte) 0x00, (byte) 0x00, (byte) 0x38, (byte) 0x6C, (byte) 0x38, (byte) 0x30, (byte) 0x76, (byte) 0x7E, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0x76, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // & 26
			{(byte) 0x00, (byte) 0x0C, (byte) 0x0C, (byte) 0x0C, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // ' 27
			{(byte) 0x00, (byte) 0x00, (byte) 0x0C, (byte) 0x18, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x18, (byte) 0x0C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // ( 28
			{(byte) 0x00, (byte) 0x00, (byte) 0x30, (byte) 0x18, (byte) 0x0C, (byte) 0x0C, (byte) 0x0C, (byte) 0x0C, (byte) 0x0C, (byte) 0x0C, (byte) 0x18, (byte) 0x30, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // ) 29
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x6C, (byte) 0x38, (byte) 0xFE, (byte) 0x38, (byte) 0x6C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // * 2A
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x18, (byte) 0x7E, (byte) 0x18, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // + 2B
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0C, (byte) 0x0C, (byte) 0x0C, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // , 2C
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xFE, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // - 2D
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // . 2E
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x06, (byte) 0x0C, (byte) 0x18, (byte) 0x30, (byte) 0x60, (byte) 0xC0, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // / 2F
			{(byte) 0x00, (byte) 0x00, (byte) 0x7C, (byte) 0xC6, (byte) 0xC6, (byte) 0xCE, (byte) 0xDE, (byte) 0xF6, (byte) 0xE6, (byte) 0xC6, (byte) 0xC6, (byte) 0x7C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // 0 30
			{(byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x78, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x7E, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // 1 31
			{(byte) 0x00, (byte) 0x00, (byte) 0x7C, (byte) 0xC6, (byte) 0xC6, (byte) 0x06, (byte) 0x0C, (byte) 0x18, (byte) 0x30, (byte) 0x60, (byte) 0xC6, (byte) 0xFE, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // 2 32
			{(byte) 0x00, (byte) 0x00, (byte) 0x7C, (byte) 0xC6, (byte) 0x06, (byte) 0x06, (byte) 0x3C, (byte) 0x06, (byte) 0x06, (byte) 0x06, (byte) 0xC6, (byte) 0x7C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // 3 33
			{(byte) 0x00, (byte) 0x00, (byte) 0x0C, (byte) 0x1C, (byte) 0x3C, (byte) 0x6C, (byte) 0xCC, (byte) 0xCC, (byte) 0xFE, (byte) 0x0C, (byte) 0x0C, (byte) 0x1E, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // 4 34
			{(byte) 0x00, (byte) 0x00, (byte) 0xFE, (byte) 0xC0, (byte) 0xC0, (byte) 0xC0, (byte) 0xFC, (byte) 0x06, (byte) 0x06, (byte) 0x06, (byte) 0xC6, (byte) 0x7C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // 5 35
			{(byte) 0x00, (byte) 0x00, (byte) 0x7C, (byte) 0xC6, (byte) 0xC0, (byte) 0xC0, (byte) 0xFC, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0x7C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // 6 36
			{(byte) 0x00, (byte) 0x00, (byte) 0xFE, (byte) 0xC6, (byte) 0x06, (byte) 0x0C, (byte) 0x18, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // 7 37
			{(byte) 0x00, (byte) 0x00, (byte) 0x7C, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0x7C, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0x7C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // 8 38
			{(byte) 0x00, (byte) 0x00, (byte) 0x7C, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0x7E, (byte) 0x06, (byte) 0x06, (byte) 0xC6, (byte) 0x7C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // 9 39
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0C, (byte) 0x0C, (byte) 0x00, (byte) 0x00, (byte) 0x0C, (byte) 0x0C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // : 3A
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0C, (byte) 0x0C, (byte) 0x00, (byte) 0x00, (byte) 0x0C, (byte) 0x0C, (byte) 0x0C, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // ; 3B
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0C, (byte) 0x18, (byte) 0x30, (byte) 0x60, (byte) 0xC0, (byte) 0x60, (byte) 0x30, (byte) 0x18, (byte) 0x0C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // < 3C
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xFE, (byte) 0x00, (byte) 0xFE, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // = 3D
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x60, (byte) 0x30, (byte) 0x18, (byte) 0x0C, (byte) 0x06, (byte) 0x0C, (byte) 0x18, (byte) 0x30, (byte) 0x60, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // > 3E
			{(byte) 0x00, (byte) 0x00, (byte) 0x7C, (byte) 0xC6, (byte) 0xC6, (byte) 0x0C, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x00, (byte) 0x18, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // ? 3F
			{(byte) 0x00, (byte) 0x00, (byte) 0x7C, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xDE, (byte) 0xDE, (byte) 0xDE, (byte) 0xDC, (byte) 0xC0, (byte) 0x7E, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // @ 40
			{(byte) 0x00, (byte) 0x00, (byte) 0x38, (byte) 0x6C, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xFE, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // A 41
			{(byte) 0x00, (byte) 0x00, (byte) 0xFC, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x7C, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0xFC, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // B 42
			{(byte) 0x00, (byte) 0x00, (byte) 0x3C, (byte) 0x66, (byte) 0xC2, (byte) 0xC0, (byte) 0xC0, (byte) 0xC0, (byte) 0xC0, (byte) 0xC2, (byte) 0x66, (byte) 0x3C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // C 43
			{(byte) 0x00, (byte) 0x00, (byte) 0xF8, (byte) 0x6C, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x6C, (byte) 0xF8, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // D 44
			{(byte) 0x00, (byte) 0x00, (byte) 0xFE, (byte) 0x66, (byte) 0x60, (byte) 0x64, (byte) 0x7C, (byte) 0x64, (byte) 0x60, (byte) 0x60, (byte) 0x66, (byte) 0xFE, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // E 45
			{(byte) 0x00, (byte) 0x00, (byte) 0xFE, (byte) 0x66, (byte) 0x60, (byte) 0x64, (byte) 0x7C, (byte) 0x64, (byte) 0x60, (byte) 0x60, (byte) 0x60, (byte) 0xF0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // F 46
			{(byte) 0x00, (byte) 0x00, (byte) 0x7C, (byte) 0xC6, (byte) 0xC6, (byte) 0xC0, (byte) 0xC0, (byte) 0xC0, (byte) 0xCE, (byte) 0xC6, (byte) 0xC6, (byte) 0x7C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // G 47
			{(byte) 0x00, (byte) 0x00, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xFE, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // H 48
			{(byte) 0x00, (byte) 0x00, (byte) 0x7E, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x7E, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // I 49
			{(byte) 0x00, (byte) 0x00, (byte) 0x3C, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0xD8, (byte) 0xD8, (byte) 0x70, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // J 4A
			{(byte) 0x00, (byte) 0x00, (byte) 0xC6, (byte) 0xC6, (byte) 0xCC, (byte) 0xD8, (byte) 0xF0, (byte) 0xF0, (byte) 0xD8, (byte) 0xCC, (byte) 0xC6, (byte) 0xC6, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // K 4B
			{(byte) 0x00, (byte) 0x00, (byte) 0xF0, (byte) 0x60, (byte) 0x60, (byte) 0x60, (byte) 0x60, (byte) 0x60, (byte) 0x60, (byte) 0x62, (byte) 0x66, (byte) 0xFE, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // L 4C
			{(byte) 0x00, (byte) 0x00, (byte) 0xC6, (byte) 0xC6, (byte) 0xEE, (byte) 0xEE, (byte) 0xFE, (byte) 0xD6, (byte) 0xD6, (byte) 0xD6, (byte) 0xC6, (byte) 0xC6, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // M 4D
			{(byte) 0x00, (byte) 0x00, (byte) 0xC6, (byte) 0xC6, (byte) 0xE6, (byte) 0xE6, (byte) 0xF6, (byte) 0xDE, (byte) 0xCE, (byte) 0xCE, (byte) 0xC6, (byte) 0xC6, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // N 4E
			{(byte) 0x00, (byte) 0x00, (byte) 0x7C, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0x7C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // O 4F
			{(byte) 0x00, (byte) 0x00, (byte) 0xFC, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x7C, (byte) 0x60, (byte) 0x60, (byte) 0x60, (byte) 0xF0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // P 50
			{(byte) 0x00, (byte) 0x00, (byte) 0x7C, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xD6, (byte) 0xD6, (byte) 0x7C, (byte) 0x06, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // Q 51
			{(byte) 0x00, (byte) 0x00, (byte) 0xFC, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x7C, (byte) 0x78, (byte) 0x6C, (byte) 0x66, (byte) 0x66, (byte) 0xE6, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // R 52
			{(byte) 0x00, (byte) 0x00, (byte) 0x7C, (byte) 0xC6, (byte) 0xC0, (byte) 0xC0, (byte) 0x70, (byte) 0x1C, (byte) 0x06, (byte) 0x06, (byte) 0xC6, (byte) 0x7C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // S 53
			{(byte) 0x00, (byte) 0x00, (byte) 0x7E, (byte) 0x5A, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x3C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // T 54
			{(byte) 0x00, (byte) 0x00, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0x7C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // U 55
			{(byte) 0x00, (byte) 0x00, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0x6C, (byte) 0x38, (byte) 0x10, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // V 56
			{(byte) 0x00, (byte) 0x00, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xD6, (byte) 0xD6, (byte) 0xD6, (byte) 0xFE, (byte) 0xEE, (byte) 0xC6, (byte) 0xC6, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // W 57
			{(byte) 0x00, (byte) 0x00, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0x6C, (byte) 0x38, (byte) 0x38, (byte) 0x6C, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // X 58
			{(byte) 0x00, (byte) 0x00, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x3C, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x3C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // Y 59
			{(byte) 0x00, (byte) 0x00, (byte) 0xFE, (byte) 0xC6, (byte) 0x86, (byte) 0x0C, (byte) 0x18, (byte) 0x30, (byte) 0x60, (byte) 0xC2, (byte) 0xC6, (byte) 0xFE, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // Z 5A
			{(byte) 0x00, (byte) 0x00, (byte) 0x7C, (byte) 0x60, (byte) 0x60, (byte) 0x60, (byte) 0x60, (byte) 0x60, (byte) 0x60, (byte) 0x60, (byte) 0x60, (byte) 0x7C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // [ 5B
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x80, (byte) 0xC0, (byte) 0x60, (byte) 0x30, (byte) 0x18, (byte) 0x0C, (byte) 0x06, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // \ 5C
			{(byte) 0x00, (byte) 0x00, (byte) 0x7C, (byte) 0x0C, (byte) 0x0C, (byte) 0x0C, (byte) 0x0C, (byte) 0x0C, (byte) 0x0C, (byte) 0x0C, (byte) 0x0C, (byte) 0x7C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // ] 5D
			{(byte) 0x00, (byte) 0x10, (byte) 0x38, (byte) 0x6C, (byte) 0xC6, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // ^ 5E
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xFF, (byte) 0x00, (byte) 0x00}, // _ 5F
			{(byte) 0x00, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x0C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // ` 60
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x78, (byte) 0x0C, (byte) 0x7C, (byte) 0xCC, (byte) 0xCC, (byte) 0xDC, (byte) 0x76, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // a 61
			{(byte) 0x00, (byte) 0x00, (byte) 0xE0, (byte) 0x60, (byte) 0x60, (byte) 0x7C, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0xFC, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // b 62
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x7C, (byte) 0xC6, (byte) 0xC0, (byte) 0xC0, (byte) 0xC0, (byte) 0xC6, (byte) 0x7C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // c 63
			{(byte) 0x00, (byte) 0x00, (byte) 0x1C, (byte) 0x0C, (byte) 0x0C, (byte) 0x7C, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0x7E, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // d 64
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x7C, (byte) 0xC6, (byte) 0xC6, (byte) 0xFE, (byte) 0xC0, (byte) 0xC6, (byte) 0x7C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // e 65
			{(byte) 0x00, (byte) 0x00, (byte) 0x1C, (byte) 0x36, (byte) 0x30, (byte) 0x30, (byte) 0xFC, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x78, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // f 66
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x76, (byte) 0xCE, (byte) 0xC6, (byte) 0xC6, (byte) 0xCE, (byte) 0x76, (byte) 0x06, (byte) 0xC6, (byte) 0x7C, (byte) 0x00, (byte) 0x00}, // g 67
			{(byte) 0x00, (byte) 0x00, (byte) 0xE0, (byte) 0x60, (byte) 0x60, (byte) 0x7C, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0xE6, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // h 68
			{(byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x18, (byte) 0x00, (byte) 0x38, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x3C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // i 69
			{(byte) 0x00, (byte) 0x00, (byte) 0x0C, (byte) 0x0C, (byte) 0x00, (byte) 0x1C, (byte) 0x0C, (byte) 0x0C, (byte) 0x0C, (byte) 0x0C, (byte) 0x0C, (byte) 0xCC, (byte) 0xCC, (byte) 0x78, (byte) 0x00, (byte) 0x00}, // j 6A
			{(byte) 0x00, (byte) 0x00, (byte) 0xE0, (byte) 0x60, (byte) 0x60, (byte) 0x66, (byte) 0x66, (byte) 0x6C, (byte) 0x78, (byte) 0x6C, (byte) 0x66, (byte) 0xE6, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // k 6B
			{(byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x1C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // l 6C
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x6C, (byte) 0xFE, (byte) 0xD6, (byte) 0xD6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // m 6D
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xDC, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // n 6E
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x7C, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0x7C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // o 6F
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xDC, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x7C, (byte) 0x60, (byte) 0x60, (byte) 0xF0, (byte) 0x00, (byte) 0x00}, // p 70
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x76, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0x7C, (byte) 0x0C, (byte) 0x0C, (byte) 0x1E, (byte) 0x00, (byte) 0x00}, // q 71
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xDC, (byte) 0x66, (byte) 0x60, (byte) 0x60, (byte) 0x60, (byte) 0x60, (byte) 0xF0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // r 72
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x7C, (byte) 0xC6, (byte) 0xC0, (byte) 0x7C, (byte) 0x06, (byte) 0xC6, (byte) 0x7C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // s 73
			{(byte) 0x00, (byte) 0x00, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0xFC, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x36, (byte) 0x1C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // t 74
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0x76, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // u 75
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0x6C, (byte) 0x38, (byte) 0x10, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // v 76
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC6, (byte) 0xC6, (byte) 0xD6, (byte) 0xD6, (byte) 0xD6, (byte) 0xFE, (byte) 0x6C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // w 77
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC6, (byte) 0xC6, (byte) 0x6C, (byte) 0x38, (byte) 0x6C, (byte) 0xC6, (byte) 0xC6, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // x 78
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xCE, (byte) 0x76, (byte) 0x06, (byte) 0xC6, (byte) 0x7C, (byte) 0x00, (byte) 0x00}, // y 79
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xFE, (byte) 0x86, (byte) 0x0C, (byte) 0x18, (byte) 0x30, (byte) 0x62, (byte) 0xFE, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // z 7A
			{(byte) 0x00, (byte) 0x00, (byte) 0x0E, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x70, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x0E, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // { 7B
			{(byte) 0x00, (byte) 0x00, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x00, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // | 7C
			{(byte) 0x00, (byte) 0x00, (byte) 0x70, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x0E, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x70, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // } 7D
			{(byte) 0x00, (byte) 0x00, (byte) 0x76, (byte) 0xDC, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}, // ~ 7E
			{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x10, (byte) 0x38, (byte) 0x38, (byte) 0x6C, (byte) 0x6C, (byte) 0xFE, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}  //  7F
	};

}
